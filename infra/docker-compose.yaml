services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "81:81" # Map port 81 for the first server
      - "82:82" # Map port 82 for the second server
    volumes:
      - ../aps/proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - client
      - auth-service
      - invoices-service
    networks:
      - aps-network

  client:
    build:
      context: ../aps/client
      dockerfile: Dockerfile
    ports:
      - "5173:5173" # Map port 5173 in the container to port 5173 on the host
    volumes:
      - ../aps/client:/app
    environment:
      - NODE_ENV=development
      - VITE_BACKEND_URL=http://api.localhost:82/
    depends_on:
      - auth-service
      - invoices-service
    networks:
      - aps-network

  auth-service:
    build:
      context: ../aps/services/auth
      dockerfile: Dockerfile
    ports:
      - "3002:3002" # Map port 3002 in the container to port 3002 on the host
    volumes:
      - ../aps/services/auth:/app
    environment:
      - NODE_ENV=development
      - MONGO_URI=mongodb://auth_db:27017/auth_db
      - JWT_KEY=your_jwt_secret_key
    depends_on:
      - auth_db
    networks:
      - aps-network

  invoices-service:
    build:
      context: ../aps/services/invoices
      dockerfile: Dockerfile
    ports:
      - "3003:3003" # Map port 3003 in the container to port 3003 on the host
    volumes:
      - ../aps/services/invoices:/app
    environment:
      - NODE_ENV=development
      - MONGO_URI=mongodb://invoices_db:27017/invoices_db
      - JWT_KEY=your_jwt_secret_key
    depends_on:
      - invoices_db
    networks:
      - aps-network

  user-service:
    build:
      context: ../aps/services/user
      dockerfile: Dockerfile
    ports:
      - "3002:3004" # Map port 3003 in the container to port 3003 on the host
    volumes:
      - ../aps/services/user:/app
    environment:
      - NODE_ENV=development
      - MONGO_URI=mongodb://invoices_db:27017/user_db
      - JWT_KEY=your_jwt_secret_key
    depends_on:
      - user_db
    networks:
      - aps-network

  auth_db:
    image: mongo:8.0.0-rc13-jammy
    container_name: auth_db
    restart: unless-stopped
    env_file: ./.env
    ports:
      - $MONGODB_AUTH_LOCAL_PORT:$MONGODB_AUTH_DOCKER_PORT
    volumes:
      - auth-mongo-data:/data/db
    networks:
      - aps-network

  invoices_db:
    image: mongo:8.0.0-rc13-jammy
    container_name: invoices_db
    restart: unless-stopped
    env_file: ./.env
    ports:
      - $MONGODB_INVOICES_LOCAL_PORT:$MONGODB_INVOICES_DOCKER_PORT
    volumes:
      - invoices-mongo-data:/data/db
    networks:
      - aps-network

  user_db:
    image: mongo:8.0.0-rc13-jammy
    container_name: user_db
    restart: unless-stopped
    env_file: ./.env
    ports:
      - $MONGODB_USER_LOCAL_PORT:$MONGODB_USER_DOCKER_PORT
    volumes:
      - user-mongo-data:/data/db
    networks:
      - aps-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - aps-network

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    networks:
      - aps-network

networks:
  aps-network:
    driver: bridge

volumes:
  auth-mongo-data:
  invoices-mongo-data:
